{
  "/home/ubuntu/serverless_framework/serverless_configs/serverless.yml": {
    "versionFramework": "4.19.1",
    "servicePath": "/home/ubuntu/serverless_framework/serverless_configs/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "serverless-framework",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "ap-south-1",
        "timeout": 10,
        "stage": "dev",
        "versionFunctions": true
      },
      "functions": {
        "service-A": {
          "handler": "handler.serviceA",
          "description": "this lambda function belongs to service A of my microservices app",
          "events": [
            {
              "httpApi": {
                "path": "/service-a",
                "method": "get"
              }
            }
          ],
          "iamRoleStatements": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ServiceBLambdaFunction",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ServerlessFrameworkTable",
                  "Arn"
                ]
              }
            }
          ],
          "name": "serverless-framework-dev-service-A"
        },
        "service-B": {
          "handler": "handler.serviceB",
          "description": "this lambda function belongs to service B of my microservices app",
          "events": [
            {
              "httpApi": {
                "path": "/service-b",
                "method": "get"
              }
            }
          ],
          "iamRoleStatements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ServiceBLambdaFunction",
                  "Arn"
                ]
              }
            }
          ],
          "name": "serverless-framework-dev-service-B"
        }
      },
      "resources": {
        "Resources": {
          "ServerlessFrameworkTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ServerlessFrameworkTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "ap-south-1",
      "timeout": 10,
      "stage": "dev",
      "versionFunctions": true
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: serverless-framework\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n  region: ap-south-1\n  timeout: 10\n  \n\nfunctions:\n  service-A:\n    handler: handler.serviceA\n    description: this lambda function belongs to service A of my microservices app\n    events:   # This blocks create an api gateway endpoint to trigger the function\n      - httpApi:\n          path: /service-a\n          method: get\n    # provide permissions to role of lambda function of service A\n    iamRoleStatements:\n      - Effect: Allow\n        Action:   # invode lambda function of service-B\n          - lambda:InvokeFunction\n        # This is the magic! We use a CloudFormation intrinsic function to get the REAL Arn of serviceB after it's created.\n        Resource: !GetAtt ServiceBLambdaFunction.Arn    # The Logical ID for the 'serviceB' function is 'ServiceBLambdaFunction'\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n        Resource: !GetAtt ServerlessFrameworkTable.Arn   # The Logical ID for the 'serverless-framework-table' function is 'Serverlessframeworktable'\n\n  service-B:\n    handler: handler.serviceB\n    description: this lambda function belongs to service B of my microservices app\n    events:   # This blocks create an api gateway endpoint to trigger the function\n      - httpApi:\n          path: /service-b\n          method: get\n    # These permissions apply ONLY to serviceB\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n        # This gets the REAL Arn of the table we define below\n        Resource: !GetAtt ServiceBLambdaFunction.Arn\n\n\n# Creating DynamoDB Table\nresources:\n  Resources:\n    ServerlessFrameworkTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n          TableName: ServerlessFrameworkTable\n          AttributeDefinitions:   # Define Columns\n            - AttributeName: id\n              AttributeType: S\n          KeySchema:   # Define value in those columns\n            - AttributeName: id\n              KeyType: HASH\n          BillingMode: PAY_PER_REQUEST\n",
    "command": [
      "remove"
    ],
    "options": {},
    "orgId": "ae40cdf6-83ee-43d3-b505-87ef3101740e",
    "orgName": "darkstar",
    "userId": "2rDp26ZKhHN7BBrCPJ",
    "userName": "darkstar",
    "serviceProviderAwsAccountId": "897722695334",
    "serviceProviderAwsCfStackName": "serverless-framework-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-south-1:897722695334:stack/serverless-framework-dev/9f93a810-9799-11f0-bdfa-027b4b302d21",
    "serviceProviderAwsCfStackCreated": "2025-09-22T09:50:52.132Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "HelloLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:897722695334:function:serverless-framework-dev-hello:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-framework-dev-HelloLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
        "ExportName": "sls-serverless-framework-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}