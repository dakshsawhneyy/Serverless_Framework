{
  "/home/ubuntu/serverless_framework/serverless_configs/serverless.yml": {
    "versionFramework": "4.19.1",
    "servicePath": "/home/ubuntu/serverless_framework/serverless_configs/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "serverless-framework",
      "plugins": [
        "serverless-plugin-canary-deployments"
      ],
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "ap-south-1",
        "tracing": {
          "lambda": true,
          "apiGateway": true
        },
        "timeout": 10,
        "environment": {
          "SERVICE_B_NAME": "serverless-framework-dev-service-B",
          "DYNAMODB_TABLE": "ServerlessFrameworkTable"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServiceDashALogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/serverless-framework-dev-service-A"
              }
            },
            "ServiceDashBLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/serverless-framework-dev-service-B"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "serverless-framework",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "xray:PutTraceSegments",
                            "xray:PutTelemetryRecords"
                          ],
                          "Resource": [
                            "*"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-framework",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ServiceDashALambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
                  "S3Key": "serverless/serverless-framework/dev/1759057391439-2025-09-28T11:03:11.439Z/serverless-framework.zip"
                },
                "Handler": "handler.serviceA",
                "Runtime": "nodejs18.x",
                "FunctionName": "serverless-framework-dev-service-A",
                "MemorySize": 1024,
                "Timeout": 10,
                "Description": "this lambda function belongs to service A of my microservices app",
                "TracingConfig": {
                  "Mode": "Active"
                },
                "Environment": {
                  "Variables": {
                    "SERVICE_B_NAME": "serverless-framework-dev-service-B",
                    "DYNAMODB_TABLE": "ServerlessFrameworkTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "ServiceDashAIamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ServiceDashAIamRoleLambdaExecution",
                "ServiceDashALogGroup"
              ]
            },
            "ServiceDashBLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
                  "S3Key": "serverless/serverless-framework/dev/1759057391439-2025-09-28T11:03:11.439Z/serverless-framework.zip"
                },
                "Handler": "handler.serviceB",
                "Runtime": "nodejs18.x",
                "FunctionName": "serverless-framework-dev-service-B",
                "MemorySize": 1024,
                "Timeout": 10,
                "Description": "this lambda function belongs to service B of my microservices app",
                "TracingConfig": {
                  "Mode": "Active"
                },
                "Environment": {
                  "Variables": {
                    "SERVICE_B_NAME": "serverless-framework-dev-service-B",
                    "DYNAMODB_TABLE": "ServerlessFrameworkTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "ServiceDashBIamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ServiceDashBIamRoleLambdaExecution",
                "ServiceDashBLogGroup"
              ]
            },
            "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ServiceDashALambdaFunction"
                },
                "CodeSha256": "O7YjQfAxIw1VdgOFz0ShKvEka2ZeI4XYltUmAPaAO/Q=",
                "Description": "this lambda function belongs to service A of my microservices app"
              }
            },
            "ServiceDashBLambdaVersion3JONF0M79i6MoUdVW1y9YA9hoHxSzU3vBpANwVgHNn4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ServiceDashBLambdaFunction"
                },
                "CodeSha256": "O7YjQfAxIw1VdgOFz0ShKvEka2ZeI4XYltUmAPaAO/Q=",
                "Description": "this lambda function belongs to service B of my microservices app"
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-serverless-framework",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceServiceDasha": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "service-a",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodServiceDashaGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceServiceDasha"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Ref": "ServiceDashALambdaFunctionAliaslive"
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ServiceDashALambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1759057378080": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodServiceDashaGet"
              ]
            },
            "ServiceDashALambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Ref": "ServiceDashALambdaFunctionAliaslive"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-serverless-framework",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "ServiceDashBLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ServiceDashBLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationServiceDashB": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ServiceDashBLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetServiceDashb": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /service-b",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationServiceDashB"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationServiceDashB"
            },
            "ServiceDashAIamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "serverless-framework",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev-service-A:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "lambda:InvokeFunction"
                          ],
                          "Resource": {
                            "Fn::GetAtt": [
                              "ServiceDashBLambdaFunction",
                              "Arn"
                            ]
                          }
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:GetItem",
                            "dynamodb:PutItem"
                          ],
                          "Resource": {
                            "Fn::GetAtt": [
                              "ServerlessFrameworkTable",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-framework",
                      "dev",
                      "service-A",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                },
                "ManagedPolicyArns": []
              }
            },
            "ServiceDashBIamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "serverless-framework",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev-service-B:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:GetItem",
                            "dynamodb:PutItem"
                          ],
                          "Resource": {
                            "Fn::GetAtt": [
                              "ServerlessFrameworkTable",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-framework",
                      "dev",
                      "service-B",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                },
                "ManagedPolicyArns": []
              }
            },
            "ServerlessFrameworkTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "ServerlessFrameworkTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "ServerlessframeworkdevDeploymentApplication": {
              "Type": "AWS::CodeDeploy::Application",
              "Properties": {
                "ComputePlatform": "Lambda"
              }
            },
            "CodeDeployServiceRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "ManagedPolicyArns": [
                  "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambdaLimited",
                  "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
                ],
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Action": [
                        "sts:AssumeRole"
                      ],
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "codedeploy.amazonaws.com"
                        ]
                      }
                    }
                  ]
                }
              }
            },
            "ServiceDashALambdaFunctionDeploymentGroup": {
              "Type": "AWS::CodeDeploy::DeploymentGroup",
              "Properties": {
                "ApplicationName": {
                  "Ref": "ServerlessframeworkdevDeploymentApplication"
                },
                "AutoRollbackConfiguration": {
                  "Enabled": true,
                  "Events": [
                    "DEPLOYMENT_FAILURE",
                    "DEPLOYMENT_STOP_ON_ALARM",
                    "DEPLOYMENT_STOP_ON_REQUEST"
                  ]
                },
                "DeploymentGroupName": "serverless-framework-dev-ServiceDashALambdaFunctionDeploymentGroup",
                "DeploymentConfigName": {
                  "Fn::Sub": [
                    "CodeDeployDefault.Lambda${ConfigName}",
                    {
                      "ConfigName": "Canary10Percent10Minutes"
                    }
                  ]
                },
                "DeploymentStyle": {
                  "DeploymentType": "BLUE_GREEN",
                  "DeploymentOption": "WITH_TRAFFIC_CONTROL"
                },
                "ServiceRoleArn": {
                  "Fn::GetAtt": [
                    "CodeDeployServiceRole",
                    "Arn"
                  ]
                },
                "AlarmConfiguration": {
                  "Alarms": [
                    {
                      "Name": "serviceA-canary-error-alarms"
                    }
                  ],
                  "Enabled": true
                }
              }
            },
            "ServiceDashALambdaFunctionAliaslive": {
              "Type": "AWS::Lambda::Alias",
              "Properties": {
                "FunctionVersion": {
                  "Fn::GetAtt": [
                    "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg",
                    "Version"
                  ]
                },
                "FunctionName": {
                  "Ref": "ServiceDashALambdaFunction"
                },
                "Name": "live"
              },
              "UpdatePolicy": {
                "CodeDeployLambdaAliasUpdate": {
                  "ApplicationName": {
                    "Ref": "ServerlessframeworkdevDeploymentApplication"
                  },
                  "DeploymentGroupName": {
                    "Ref": "ServiceDashALambdaFunctionDeploymentGroup"
                  }
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
              "Export": {
                "Name": "sls-serverless-framework-dev-ServerlessDeploymentBucketName"
              }
            },
            "ServiceDashALambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg"
              },
              "Export": {
                "Name": "sls-serverless-framework-dev-ServiceDashALambdaFunctionQualifiedArn"
              }
            },
            "ServiceDashBLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ServiceDashBLambdaVersion3JONF0M79i6MoUdVW1y9YA9hoHxSzU3vBpANwVgHNn4"
              },
              "Export": {
                "Name": "sls-serverless-framework-dev-ServiceDashBLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-serverless-framework-dev-ServiceEndpoint"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-serverless-framework-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-serverless-framework-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "service-A": {
          "handler": "handler.serviceA",
          "description": "this lambda function belongs to service A of my microservices app",
          "events": [
            {
              "http": {
                "path": "service-a",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "deploymentSettings": {
            "type": "Canary10Percent10Minutes",
            "alias": "live",
            "alarms": [
              {
                "name": "serviceA-canary-error-alarms",
                "metric": "Errors",
                "threshold": 1,
                "period": 60,
                "evaluationPeriods": 1,
                "comparisonOperator": "GreaterThanOrEqualToThreshold"
              }
            ]
          },
          "iamRoleStatements": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ServiceDashBLambdaFunction",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ServerlessFrameworkTable",
                  "Arn"
                ]
              }
            }
          ],
          "name": "serverless-framework-dev-service-A",
          "package": {},
          "memory": 1024,
          "timeout": 10,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg"
        },
        "service-B": {
          "handler": "handler.serviceB",
          "description": "this lambda function belongs to service B of my microservices app",
          "events": [
            {
              "httpApi": {
                "path": "/service-b",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/service-b"
            }
          ],
          "iamRoleStatements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ServerlessFrameworkTable",
                  "Arn"
                ]
              }
            }
          ],
          "name": "serverless-framework-dev-service-B",
          "package": {},
          "memory": 1024,
          "timeout": 10,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "ServiceDashBLambdaVersion3JONF0M79i6MoUdVW1y9YA9hoHxSzU3vBpANwVgHNn4"
        }
      },
      "resources": {
        "Resources": {
          "ServerlessFrameworkTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ServerlessFrameworkTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "ap-south-1",
      "tracing": {
        "lambda": true,
        "apiGateway": true
      },
      "timeout": 10,
      "environment": {
        "SERVICE_B_NAME": "serverless-framework-dev-service-B",
        "DYNAMODB_TABLE": "ServerlessFrameworkTable"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServiceDashALogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-framework-dev-service-A"
            }
          },
          "ServiceDashBLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-framework-dev-service-B"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "serverless-framework",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "xray:PutTraceSegments",
                          "xray:PutTelemetryRecords"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "serverless-framework",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ServiceDashALambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
                "S3Key": "serverless/serverless-framework/dev/1759057391439-2025-09-28T11:03:11.439Z/serverless-framework.zip"
              },
              "Handler": "handler.serviceA",
              "Runtime": "nodejs18.x",
              "FunctionName": "serverless-framework-dev-service-A",
              "MemorySize": 1024,
              "Timeout": 10,
              "Description": "this lambda function belongs to service A of my microservices app",
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "SERVICE_B_NAME": "serverless-framework-dev-service-B",
                  "DYNAMODB_TABLE": "ServerlessFrameworkTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "ServiceDashAIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ServiceDashAIamRoleLambdaExecution",
              "ServiceDashALogGroup"
            ]
          },
          "ServiceDashBLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
                "S3Key": "serverless/serverless-framework/dev/1759057391439-2025-09-28T11:03:11.439Z/serverless-framework.zip"
              },
              "Handler": "handler.serviceB",
              "Runtime": "nodejs18.x",
              "FunctionName": "serverless-framework-dev-service-B",
              "MemorySize": 1024,
              "Timeout": 10,
              "Description": "this lambda function belongs to service B of my microservices app",
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "SERVICE_B_NAME": "serverless-framework-dev-service-B",
                  "DYNAMODB_TABLE": "ServerlessFrameworkTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "ServiceDashBIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ServiceDashBIamRoleLambdaExecution",
              "ServiceDashBLogGroup"
            ]
          },
          "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ServiceDashALambdaFunction"
              },
              "CodeSha256": "O7YjQfAxIw1VdgOFz0ShKvEka2ZeI4XYltUmAPaAO/Q=",
              "Description": "this lambda function belongs to service A of my microservices app"
            }
          },
          "ServiceDashBLambdaVersion3JONF0M79i6MoUdVW1y9YA9hoHxSzU3vBpANwVgHNn4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ServiceDashBLambdaFunction"
              },
              "CodeSha256": "O7YjQfAxIw1VdgOFz0ShKvEka2ZeI4XYltUmAPaAO/Q=",
              "Description": "this lambda function belongs to service B of my microservices app"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-serverless-framework",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceServiceDasha": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "service-a",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodServiceDashaGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceServiceDasha"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Ref": "ServiceDashALambdaFunctionAliaslive"
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ServiceDashALambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1759057378080": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodServiceDashaGet"
            ]
          },
          "ServiceDashALambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Ref": "ServiceDashALambdaFunctionAliaslive"
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-serverless-framework",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "ServiceDashBLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ServiceDashBLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationServiceDashB": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ServiceDashBLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetServiceDashb": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /service-b",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationServiceDashB"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationServiceDashB"
          },
          "ServiceDashAIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "serverless-framework",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev-service-A:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "ServiceDashBLambdaFunction",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "ServerlessFrameworkTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "serverless-framework",
                    "dev",
                    "service-A",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "ServiceDashBIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "serverless-framework",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev-service-B:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "ServerlessFrameworkTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "serverless-framework",
                    "dev",
                    "service-B",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "ServerlessFrameworkTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ServerlessFrameworkTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "ServerlessframeworkdevDeploymentApplication": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties": {
              "ComputePlatform": "Lambda"
            }
          },
          "CodeDeployServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambdaLimited",
                "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
              ],
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": [
                      "sts:AssumeRole"
                    ],
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "codedeploy.amazonaws.com"
                      ]
                    }
                  }
                ]
              }
            }
          },
          "ServiceDashALambdaFunctionDeploymentGroup": {
            "Type": "AWS::CodeDeploy::DeploymentGroup",
            "Properties": {
              "ApplicationName": {
                "Ref": "ServerlessframeworkdevDeploymentApplication"
              },
              "AutoRollbackConfiguration": {
                "Enabled": true,
                "Events": [
                  "DEPLOYMENT_FAILURE",
                  "DEPLOYMENT_STOP_ON_ALARM",
                  "DEPLOYMENT_STOP_ON_REQUEST"
                ]
              },
              "DeploymentGroupName": "serverless-framework-dev-ServiceDashALambdaFunctionDeploymentGroup",
              "DeploymentConfigName": {
                "Fn::Sub": [
                  "CodeDeployDefault.Lambda${ConfigName}",
                  {
                    "ConfigName": "Canary10Percent10Minutes"
                  }
                ]
              },
              "DeploymentStyle": {
                "DeploymentType": "BLUE_GREEN",
                "DeploymentOption": "WITH_TRAFFIC_CONTROL"
              },
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "CodeDeployServiceRole",
                  "Arn"
                ]
              },
              "AlarmConfiguration": {
                "Alarms": [
                  {
                    "Name": "serviceA-canary-error-alarms"
                  }
                ],
                "Enabled": true
              }
            }
          },
          "ServiceDashALambdaFunctionAliaslive": {
            "Type": "AWS::Lambda::Alias",
            "Properties": {
              "FunctionVersion": {
                "Fn::GetAtt": [
                  "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg",
                  "Version"
                ]
              },
              "FunctionName": {
                "Ref": "ServiceDashALambdaFunction"
              },
              "Name": "live"
            },
            "UpdatePolicy": {
              "CodeDeployLambdaAliasUpdate": {
                "ApplicationName": {
                  "Ref": "ServerlessframeworkdevDeploymentApplication"
                },
                "DeploymentGroupName": {
                  "Ref": "ServiceDashALambdaFunctionDeploymentGroup"
                }
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
            "Export": {
              "Name": "sls-serverless-framework-dev-ServerlessDeploymentBucketName"
            }
          },
          "ServiceDashALambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg"
            },
            "Export": {
              "Name": "sls-serverless-framework-dev-ServiceDashALambdaFunctionQualifiedArn"
            }
          },
          "ServiceDashBLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ServiceDashBLambdaVersion3JONF0M79i6MoUdVW1y9YA9hoHxSzU3vBpANwVgHNn4"
            },
            "Export": {
              "Name": "sls-serverless-framework-dev-ServiceDashBLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-serverless-framework-dev-ServiceEndpoint"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-serverless-framework-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-serverless-framework-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: serverless-framework\n\n# Telling to use this plugin for canary deployment\nplugins:\n  - serverless-plugin-canary-deployments\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n  region: ap-south-1\n  tracing:    # Enabling AWS X-Ray\n    lambda: true\n    apiGateway: true\n  timeout: 10\n\n  # providing env variables for handler.js\n  environment:\n    SERVICE_B_NAME: ${self:service}-${sls:stage}-service-B     # (serverless-framework)-(dev)-(service-B)\n    DYNAMODB_TABLE: ServerlessFrameworkTable\n\nfunctions:\n  service-A:\n    handler: handler.serviceA\n    description: this lambda function belongs to service A of my microservices app\n    events:   # This blocks create an api gateway endpoint to trigger the function\n      - http:\n          path: /service-a\n          method: get\n    # Deploying using Canary Deployment\n    deploymentSettings:\n      type: Canary10Percent10Minutes   # Shift 10% of traffic, then 100% after 10 minutes\n      alias: live   # Create a stable 'live' alias for this function\n      # This section defines alarms that will trigger an automatic rollback if they go off\n      alarms:\n        - name: serviceA-canary-error-alarms\n          # This alarm watches the error rate of our function\n          metric: Errors\n          threshold: 1 # If there is 1 or more errors...\n          period: 60 # ...in any 60-second period...\n          evaluationPeriods: 1 # ...during the canary...\n          comparisonOperator: GreaterThanOrEqualToThreshold\n          # ...then automatically roll back the deployment.\n    # provide permissions to role of lambda function of service A\n    iamRoleStatements:\n      - Effect: Allow\n        Action:   # invode lambda function of service-B\n          - lambda:InvokeFunction\n        # This is the magic! We use a CloudFormation intrinsic function to get the REAL Arn of serviceB after it's created.\n        Resource: !GetAtt ServiceDashBLambdaFunction.Arn    # The Logical ID for the 'service-B' function is 'ServiceDashBLambdaFunction'\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n        Resource: !GetAtt ServerlessFrameworkTable.Arn   # The Logical ID for the 'serverless-framework-table' function is 'Serverlessframeworktable'\n\n\n  service-B:\n    handler: handler.serviceB\n    description: this lambda function belongs to service B of my microservices app\n    \n    # Add the FIS agent's \"equipment\" via a Lambda Layer\n    # layers:\n    #   - arn:aws:lambda:ap-south-1:152192661133:layer:AWS-FIS-Fault-Injection-Layer:4\n    # Tell the agent where to find its \"mission briefing\"\n    # environment:\n    #   AWS_FIS_CONFIGURATION_LOCATION: /tmp/fis-agent-config.json\n    \n    events:   # This blocks create an api gateway endpoint to trigger the function\n      - httpApi:\n          path: /service-b\n          method: get\n    # These permissions apply ONLY to serviceB\n    iamRoleStatements:\n      - Effect: Allow\n        Action:\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n        # This gets the REAL Arn of the table we define below\n        Resource: !GetAtt ServerlessFrameworkTable.Arn\n\n\n# Creating DynamoDB Table\nresources:\n  Resources:\n    ServerlessFrameworkTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n          TableName: ServerlessFrameworkTable\n          AttributeDefinitions:   # Define Columns\n            - AttributeName: id\n              AttributeType: S\n          KeySchema:   # Define value in those columns\n            - AttributeName: id\n              KeyType: HASH\n          BillingMode: PAY_PER_REQUEST\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "ae40cdf6-83ee-43d3-b505-87ef3101740e",
    "orgName": "darkstar",
    "userId": "2rDp26ZKhHN7BBrCPJ",
    "userName": "darkstar",
    "serviceProviderAwsAccountId": "897722695334",
    "serviceProviderAwsCfStackName": "serverless-framework-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-south-1:897722695334:stack/serverless-framework-dev/b9f20100-9c5a-11f0-8780-069459459b81",
    "serviceProviderAwsCfStackCreated": "2025-09-28T11:03:12.996Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ServiceDashALambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:897722695334:function:serverless-framework-dev-service-A:19",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-framework-dev-ServiceDashALambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceDashBLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:897722695334:function:serverless-framework-dev-service-B:19",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-framework-dev-ServiceDashBLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "ojqxdf1m65",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-serverless-framework-dev-HttpApiId"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://xtxob1s4k8.execute-api.ap-south-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-serverless-framework-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
        "ExportName": "sls-serverless-framework-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://ojqxdf1m65.execute-api.ap-south-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-serverless-framework-dev-HttpApiUrl"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "ServiceDashALogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/serverless-framework-dev-service-A"
          }
        },
        "ServiceDashBLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/serverless-framework-dev-service-B"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-framework",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "xray:PutTraceSegments",
                        "xray:PutTelemetryRecords"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "serverless-framework",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "ServiceDashALambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
              "S3Key": "serverless/serverless-framework/dev/1759057391439-2025-09-28T11:03:11.439Z/serverless-framework.zip"
            },
            "Handler": "handler.serviceA",
            "Runtime": "nodejs18.x",
            "FunctionName": "serverless-framework-dev-service-A",
            "MemorySize": 1024,
            "Timeout": 10,
            "Description": "this lambda function belongs to service A of my microservices app",
            "TracingConfig": {
              "Mode": "Active"
            },
            "Environment": {
              "Variables": {
                "SERVICE_B_NAME": "serverless-framework-dev-service-B",
                "DYNAMODB_TABLE": "ServerlessFrameworkTable"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "ServiceDashAIamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ServiceDashAIamRoleLambdaExecution",
            "ServiceDashALogGroup"
          ]
        },
        "ServiceDashBLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
              "S3Key": "serverless/serverless-framework/dev/1759057391439-2025-09-28T11:03:11.439Z/serverless-framework.zip"
            },
            "Handler": "handler.serviceB",
            "Runtime": "nodejs18.x",
            "FunctionName": "serverless-framework-dev-service-B",
            "MemorySize": 1024,
            "Timeout": 10,
            "Description": "this lambda function belongs to service B of my microservices app",
            "TracingConfig": {
              "Mode": "Active"
            },
            "Environment": {
              "Variables": {
                "SERVICE_B_NAME": "serverless-framework-dev-service-B",
                "DYNAMODB_TABLE": "ServerlessFrameworkTable"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "ServiceDashBIamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ServiceDashBIamRoleLambdaExecution",
            "ServiceDashBLogGroup"
          ]
        },
        "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ServiceDashALambdaFunction"
            },
            "CodeSha256": "O7YjQfAxIw1VdgOFz0ShKvEka2ZeI4XYltUmAPaAO/Q=",
            "Description": "this lambda function belongs to service A of my microservices app"
          }
        },
        "ServiceDashBLambdaVersion3JONF0M79i6MoUdVW1y9YA9hoHxSzU3vBpANwVgHNn4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ServiceDashBLambdaFunction"
            },
            "CodeSha256": "O7YjQfAxIw1VdgOFz0ShKvEka2ZeI4XYltUmAPaAO/Q=",
            "Description": "this lambda function belongs to service B of my microservices app"
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-serverless-framework",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceServiceDasha": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "service-a",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodServiceDashaGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceServiceDasha"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Ref": "ServiceDashALambdaFunctionAliaslive"
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "ServiceDashALambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1759057378080": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodServiceDashaGet"
          ]
        },
        "ServiceDashALambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Ref": "ServiceDashALambdaFunctionAliaslive"
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-serverless-framework",
            "ProtocolType": "HTTP"
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "ServiceDashBLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ServiceDashBLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationServiceDashB": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ServiceDashBLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetServiceDashb": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /service-b",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationServiceDashB"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationServiceDashB"
        },
        "ServiceDashAIamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-framework",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev-service-A:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "lambda:InvokeFunction"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "ServiceDashBLambdaFunction",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "ServerlessFrameworkTable",
                          "Arn"
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "serverless-framework",
                  "dev",
                  "service-A",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            },
            "ManagedPolicyArns": []
          }
        },
        "ServiceDashBIamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-framework",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-framework-dev-service-B:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "ServerlessFrameworkTable",
                          "Arn"
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "serverless-framework",
                  "dev",
                  "service-B",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            },
            "ManagedPolicyArns": []
          }
        },
        "ServerlessFrameworkTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ServerlessFrameworkTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "ServerlessframeworkdevDeploymentApplication": {
          "Type": "AWS::CodeDeploy::Application",
          "Properties": {
            "ComputePlatform": "Lambda"
          }
        },
        "CodeDeployServiceRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambdaLimited",
              "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
            ],
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "codedeploy.amazonaws.com"
                    ]
                  }
                }
              ]
            }
          }
        },
        "ServiceDashALambdaFunctionDeploymentGroup": {
          "Type": "AWS::CodeDeploy::DeploymentGroup",
          "Properties": {
            "ApplicationName": {
              "Ref": "ServerlessframeworkdevDeploymentApplication"
            },
            "AutoRollbackConfiguration": {
              "Enabled": true,
              "Events": [
                "DEPLOYMENT_FAILURE",
                "DEPLOYMENT_STOP_ON_ALARM",
                "DEPLOYMENT_STOP_ON_REQUEST"
              ]
            },
            "DeploymentGroupName": "serverless-framework-dev-ServiceDashALambdaFunctionDeploymentGroup",
            "DeploymentConfigName": {
              "Fn::Sub": [
                "CodeDeployDefault.Lambda${ConfigName}",
                {
                  "ConfigName": "Canary10Percent10Minutes"
                }
              ]
            },
            "DeploymentStyle": {
              "DeploymentType": "BLUE_GREEN",
              "DeploymentOption": "WITH_TRAFFIC_CONTROL"
            },
            "ServiceRoleArn": {
              "Fn::GetAtt": [
                "CodeDeployServiceRole",
                "Arn"
              ]
            },
            "AlarmConfiguration": {
              "Alarms": [
                {
                  "Name": "serviceA-canary-error-alarms"
                }
              ],
              "Enabled": true
            }
          }
        },
        "ServiceDashALambdaFunctionAliaslive": {
          "Type": "AWS::Lambda::Alias",
          "Properties": {
            "FunctionVersion": {
              "Fn::GetAtt": [
                "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg",
                "Version"
              ]
            },
            "FunctionName": {
              "Ref": "ServiceDashALambdaFunction"
            },
            "Name": "live"
          },
          "UpdatePolicy": {
            "CodeDeployLambdaAliasUpdate": {
              "ApplicationName": {
                "Ref": "ServerlessframeworkdevDeploymentApplication"
              },
              "DeploymentGroupName": {
                "Ref": "ServiceDashALambdaFunctionDeploymentGroup"
              }
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-ap-south-1-ef6a676c-48d2",
          "Export": {
            "Name": "sls-serverless-framework-dev-ServerlessDeploymentBucketName"
          }
        },
        "ServiceDashALambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ServiceDashALambdaVersionECn2a8ilhq4OImOEUZHOLFqxP87tWriDvzlUJPZ4jg"
          },
          "Export": {
            "Name": "sls-serverless-framework-dev-ServiceDashALambdaFunctionQualifiedArn"
          }
        },
        "ServiceDashBLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ServiceDashBLambdaVersion3JONF0M79i6MoUdVW1y9YA9hoHxSzU3vBpANwVgHNn4"
          },
          "Export": {
            "Name": "sls-serverless-framework-dev-ServiceDashBLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-serverless-framework-dev-ServiceEndpoint"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-serverless-framework-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-serverless-framework-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}