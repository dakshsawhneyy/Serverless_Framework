service: serverless-framework

# Telling to use this plugin for canary deployment
plugins:
  - serverless-plugin-canary-deployments

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  tracing:    # Enabling AWS X-Ray
    lambda: true
    apiGateway: true
  timeout: 10

  # providing env variables for handler.js
  environment:
    SERVICE_B_NAME: ${self:service}-${sls:stage}-service-B     # (serverless-framework)-(dev)-(service-B)
    DYNAMODB_TABLE: ServerlessFrameworkTable

functions:
  service-A:
    handler: handler.serviceA
    description: this lambda function belongs to service A of my microservices app
    events:   # This blocks create an api gateway endpoint to trigger the function
      - http:
          path: /service-a
          method: get
    # Deploying using Canary Deployment
    deploymentSettings:
      type: Canary10Percent10Minutes   # Shift 10% of traffic, then 100% after 10 minutes
      alias: live   # Create a stable 'live' alias for this function
      # This section defines alarms that will trigger an automatic rollback if they go off
      alarms:
        - name: serviceA-canary-error-alarms
          # This alarm watches the error rate of our function
          metric: Errors
          threshold: 1 # If there is 1 or more errors...
          period: 60 # ...in any 60-second period...
          evaluationPeriods: 1 # ...during the canary...
          comparisonOperator: GreaterThanOrEqualToThreshold
          # ...then automatically roll back the deployment.
    # provide permissions to role of lambda function of service A
    iamRoleStatements:
      - Effect: Allow
        Action:   # invode lambda function of service-B
          - lambda:InvokeFunction
        # This is the magic! We use a CloudFormation intrinsic function to get the REAL Arn of serviceB after it's created.
        Resource: !GetAtt ServiceDashBLambdaFunction.Arn    # The Logical ID for the 'service-B' function is 'ServiceDashBLambdaFunction'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: !GetAtt ServerlessFrameworkTable.Arn   # The Logical ID for the 'serverless-framework-table' function is 'Serverlessframeworktable'


  service-B:
    handler: handler.serviceB
    description: this lambda function belongs to service B of my microservices app
    
    # Add the FIS agent's "equipment" via a Lambda Layer
    # layers:
    #   - arn:aws:lambda:ap-south-1:152192661133:layer:AWS-FIS-Fault-Injection-Layer:4
    # Tell the agent where to find its "mission briefing"
    # environment:
    #   AWS_FIS_CONFIGURATION_LOCATION: /tmp/fis-agent-config.json
    
    events:   # This blocks create an api gateway endpoint to trigger the function
      - httpApi:
          path: /service-b
          method: get
    # These permissions apply ONLY to serviceB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        # This gets the REAL Arn of the table we define below
        Resource: !GetAtt ServerlessFrameworkTable.Arn


# Creating DynamoDB Table
resources:
  Resources:
    ServerlessFrameworkTable:
      Type: AWS::DynamoDB::Table
      Properties:
          TableName: ServerlessFrameworkTable
          AttributeDefinitions:   # Define Columns
            - AttributeName: id
              AttributeType: S
          KeySchema:   # Define value in those columns
            - AttributeName: id
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
